name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version-file: '.nvmrc'
                  cache: 'pnpm'

            - name: Install pnpm
              uses: pnpm/action-setup@v4

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Start Redis service
              run: docker compose --env-file .env.test -f docker-compose.test.yml up -d

            - name: Run tests with coverage
              run: pnpm test:coverage
              env:
                  REDIS_URL: 'redis://:testpassword@localhost:6379'
                  REDIS_PASSWORD: 'testpassword'
                  REDIS_PORT: '6379'


            - name: Wait for Redis to be ready
              run: |
                timeout=30
                counter=0
                echo "Waiting for Redis to be healthy..."
                while [ $counter -lt $timeout ]; do
                  if docker compose -f docker-compose.test.yml ps --services --filter "health=healthy" | grep -q "redis"; then
                    echo "Redis is healthy."
                    exit 0
                  fi
                  echo "Redis not healthy, retrying in 1s... ($counter/$timeout)"
                  sleep 1
                  counter=$((counter + 1))
                done
                echo "Redis did not become healthy in time."
                exit 1

            - name: Upload coverage report
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: coverage/

            - name: Stop Redis service
              if: always() # Ensure this runs even if tests fail
              run: docker compose --env-file .env.test -f docker-compose.test.yml down
